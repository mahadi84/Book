
## ডেভিড জে. শোয়ার্টজের "দ্য ম্যাজিক অফ থিংকিং বিগ": সেরা সফটওয়্যার প্রকৌশলী হওয়ার পথে মূলনীতি ও বাস্তব উদাহরণ

ডেভিড জে. শোয়ার্টজের "দ্য ম্যাজিক অফ থিংকিং বিগ" একটি অনুপ্রেরণামূলক বই যা আমাদের বড় করে ভাবতে এবং সেই অনুযায়ী কাজ করতে উৎসাহিত করে। 
যদিও এটি বিশেষভাবে সফটওয়্যার প্রকৌশলীদের জন্য লেখা নয়, এর মূল নীতিগুলো একজন সফটওয়্যার প্রকৌশলীকে তাদের কর্মজীবনে অসাধারণ সাফল্য অর্জন করতে সাহায্য করতে পারে। 
নিচে বইটির কিছু গুরুত্বপূর্ণ নীতি বাস্তব জীবনের উদাহরণসহ বাংলায় আলোচনা করা হলো, যা আপনাকে একজন সেরা সফটওয়্যার প্রকৌশলী হতে উৎসাহিত করবে:

১. বড় করে ভাবুন (Think Big):

* নীতি: ছোট লক্ষ্য নির্ধারণ না করে, বড় এবং সাহসী স্বপ্ন দেখুন। নিজের সম্ভাবনাকে সীমিত করবেন না।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: একজন সাধারণ সফটওয়্যার প্রকৌশলী হয়তো একটি নির্দিষ্ট ফিচার তৈরি করার কথা ভাবতে পারেন। কিন্তু একজন "বড় করে ভাবা" প্রকৌশলী হয়তো এমন একটি নতুন প্ল্যাটফর্ম বা আর্কিটেকচারের কথা ভাবতে পারেন যা পুরো ইন্ডাস্ট্রিতে পরিবর্তন আনবে।
* বাস্তব উদাহরণ:
    * ছোট চিন্তা: "আমি এই স্প্রিন্টে এই বাগগুলো ফিক্স করব।"
    * বড় চিন্তা: "আমি এমন একটি স্বয়ংক্রিয় টেস্টিং ফ্রেমওয়ার্ক তৈরি করব যা ভবিষ্যতে আমাদের দলের বাগ কমানোর হার ৯০% বাড়িয়ে দেবে।"
    * সাফল্যের উদাহরণ: গুগল যখন তাদের সার্চ ইঞ্জিন তৈরি করে, তারা শুধু একটি ভালো সার্চ ইঞ্জিন বানানোর কথা ভাবেনি, তারা বিশ্বের সমস্ত তথ্যকে সহজলভ্য করার কথা ভেবেছিল।

২. ব্যর্থতার ভয়কে জয় করুন (Cure Yourself of Failureitis):

* নীতি: ব্যর্থতাকে ব্যক্তিগত ত্রুটি হিসেবে না দেখে শেখার সুযোগ হিসেবে দেখুন। আত্মবিশ্বাসের অভাব এবং "আমি পারব না" এই ধরনের নেতিবাচক চিন্তাভাবনা পরিহার করুন।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: নতুন প্রযুক্তি শেখা, জটিল সমস্যা সমাধান করা বা নতুন ডিজাইন বাস্তবায়ন করার সময় ব্যর্থতা আসা স্বাভাবিক। ভয় পেলে নতুন কিছু চেষ্টা করা বা সমস্যার গভীরে যাওয়া সম্ভব হবে না।
* বাস্তব উদাহরণ:
    * ভয়: "আমি এই নতুন প্রোগ্রামিং ভাষা শিখতে পারব না, এটা অনেক কঠিন।"
    * সাহস: "এই নতুন প্রোগ্রামিং ভাষাটি প্রথমে কঠিন মনে হলেও, আমি নিয়মিত অনুশীলন করব এবং প্রয়োজনে অন্যদের সাহায্য নেব।"
    * সাফল্যের উদাহরণ: থমাস এডিসন বৈদ্যুতিক বাতি আবিষ্কারের আগে অসংখ্যবার ব্যর্থ হয়েছিলেন। কিন্তু তিনি হাল ছাড়েননি এবং প্রতিটি ব্যর্থতা থেকে নতুন কিছু শিখেছেন।

৩. সৃজনশীলভাবে ভাবুন এবং নতুন ধারণা তৈরি করুন (Build Confidence and Destroy Fear):

* নীতি: গতানুগতিক চিন্তাভাবনা পরিহার করে নতুন এবং উদ্ভাবনী সমাধান খোঁজার চেষ্টা করুন। জিজ্ঞাসা করুন "এটা কিভাবে আরও ভালো করা যায়?"
* সফটওয়্যার প্রকৌশলে প্রয়োগ: একজন ভালো সফটওয়্যার প্রকৌশলী শুধু সমস্যার সমাধান করেন না, বরং সবচেয়ে কার্যকর এবং উদ্ভাবনী সমাধান খুঁজে বের করার চেষ্টা করেন। এর জন্য নিয়মিত নতুন প্রযুক্তি এবং ডিজাইন প্যাটার্ন সম্পর্কে জানতে হয়।
* বাস্তব উদাহরণ:
    * সাধারণ চিন্তা: "আমরা এই ফিচারটি একটি সাধারণ ডেটাবেস ব্যবহার করে তৈরি করতে পারি।"
    * সৃজনশীল চিন্তা: "আমরা কি নোSQL ডেটাবেস ব্যবহার করে আরও ভালো পারফরম্যান্স এবং স্কেলেবিলিটি অর্জন করতে পারি? অথবা অন্য কোনো বিকল্প আছে যা আমাদের বিশেষ চাহিদা পূরণ করতে পারে?"
    * সাফল্যের উদাহরণ: অ্যাপল তাদের আইপড, আইফোন এবং আইপ্যাডের মাধ্যমে বিদ্যমান প্রযুক্তিকে নতুনভাবে ব্যবহার করে এবং উদ্ভাবনী ডিজাইন দিয়ে পুরো শিল্পে বিপ্লব এনেছিল।

৪. মানুষের মতো করে ভাবুন (Think Like People):

* নীতি: অন্যদের দৃষ্টিকোণ থেকে জিনিসগুলি দেখার চেষ্টা করুন। বুঝুন আপনার কাজ ব্যবহারকারীদের উপর এবং আপনার সহকর্মীদের উপর কেমন প্রভাব ফেলবে।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: একজন সফটওয়্যার প্রকৌশলীকে শুধু কোড লিখলেই হয় না, তাকে ব্যবহারকারীর চাহিদা বুঝতে হয়, দলের অন্যান্য সদস্যদের সাথে সহযোগিতা করতে হয় এবং তাদের মতামতকে গুরুত্ব দিতে হয়।
* বাস্তব উদাহরণ:
    * একমুখী চিন্তা: "আমি এই ফিচারটি আমার মতো করে ডিজাইন করব।"
    * মানুষের মতো চিন্তা: "এই ফিচারটি ব্যবহারকারীদের জন্য কতটা সহজ হবে? আমার দলের অন্য সদস্যরা এই ডিজাইন সম্পর্কে কি ভাবছেন? তাদের কোনো মূল্যবান পরামর্শ আছে কি?"
    * সাফল্যের উদাহরণ: অ্যামাজন তাদের গ্রাহকদের চাহিদাকে সবচেয়ে বেশি গুরুত্ব দেয় এবং সেই অনুযায়ী তাদের প্ল্যাটফর্ম এবং পরিষেবা তৈরি করে।

৫. নিজের চিন্তাভাবনাকে সক্রিয় করুন (Activate Your Mental Power):

* নীতি: অলসভাবে বসে না থেকে নিজের মনকে সক্রিয় রাখুন। সমস্যা সমাধানের জন্য নিয়মিত চিন্তা করুন এবং নতুন জ্ঞান অর্জনের চেষ্টা করুন।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: সফটওয়্যার প্রকৌশল একটি পরিবর্তনশীল ক্ষেত্র। নতুন প্রযুক্তি এবং টুলস প্রতিনিয়ত আসছে। একজন সফল প্রকৌশলীকে নিয়মিত শিখতে এবং নিজের জ্ঞানকে আপডেট রাখতে হয়।
* বাস্তব উদাহরণ:
    * অলস চিন্তা: "আমার যা জানা আছে তাই যথেষ্ট।"
    * সক্রিয় চিন্তা: "নতুন কোন প্রোগ্রামিং ল্যাঙ্গুয়েজ বা টেকনোলজি এখন জনপ্রিয় হচ্ছে? আমি কিভাবে আমার দক্ষতা বৃদ্ধি করতে পারি?"
    * সাফল্যের উদাহরণ: বিল গেটস নিয়মিত নতুন প্রযুক্তি এবং ব্যবসার ধারণা নিয়ে পড়াশোনা করতেন এবং সেই জ্ঞান তার কোম্পানি মাইক্রোসফটের উন্নয়নে কাজে লাগিয়েছেন।

৬. ইতিবাচক মনোভাবের শক্তি (The Power of Enthusiasm):

* নীতি: নিজের কাজ এবং লক্ষ্যের প্রতি ইতিবাচক মনোভাব রাখুন। উদ্যম এবং আগ্রহের সাথে কাজ করলে কঠিন কাজও সহজ মনে হয়।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: জটিল বাগ ফিক্স করা বা ডেডলাইনের মধ্যে কাজ শেষ করার জন্য ইতিবাচক মনোভাব এবং উদ্যম অপরিহার্য।
* বাস্তব উদাহরণ:
    * নেতিবাচক মনোভাব: "এই কাজটি অনেক কঠিন, এটা কখনোই শেষ হবে না।"
    * ইতিবাচক মনোভাব: "এই কাজটি চ্যালেঞ্জিং, কিন্তু আমি আত্মবিশ্বাসী যে আমরা সবাই মিলে এটি সফলভাবে সম্পন্ন করতে পারব।"
    * সাফল্যের উদাহরণ: ইলন মাস্ক তার বিভিন্ন কোম্পানির (যেমন টেসলা এবং স্পেসএক্স) অসম্ভব মনে হওয়া লক্ষ্যগুলিও তার প্রবল উৎসাহ এবং ইতিবাচক মনোভাবের কারণেই অর্জন করতে পেরেছেন।

৭. নেতৃত্বসুলভ মানসিকতা গড়ে তুলুন (How to Think Like a Leader):

* নীতি: শুধু নিজের কাজের জন্য নয়, পুরো দলের সাফল্যের জন্য দায়িত্ব নিন। অন্যদের অনুপ্রাণিত করুন এবং সহযোগিতা করুন।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: একজন সিনিয়র বা লিড সফটওয়্যার প্রকৌশলীকে শুধু ভালো কোডার হলেই চলে না, তাকে তার দলের সদস্যদের গাইড করতে হয়, তাদের সমস্যা সমাধানে সাহায্য করতে হয় এবং একটি ইতিবাচক কাজের পরিবেশ তৈরি করতে হয়।
* বাস্তব উদাহরণ:
    * ব্যক্তিগত চিন্তা: "আমি আমার কাজ শেষ করেছি, এখন আমার আর কিছু করার নেই।"
    * নেতৃত্বসুলভ চিন্তা: "আমার দলের অন্য সদস্যদের কোনো সাহায্যের প্রয়োজন আছে কি? আমরা কিভাবে একসাথে এই প্রজেক্টটিকে আরও ভালোভাবে সম্পন্ন করতে পারি?"
    * সাফল্যের উদাহরণ: সুন্দর পিচাই (গুগলের সিইও) একজন অসাধারণ নেতা হিসেবে পরিচিত, যিনি তার দলের সদস্যদের অনুপ্রাণিত করেন এবং একটি সম্মিলিত লক্ষ্যের দিকে এগিয়ে যেতে সাহায্য করেন।

৮. "কেন" জিজ্ঞাসা করার অভ্যাস (The Magic of Asking "Why"):

* নীতি: কোনো কিছু অন্ধভাবে মেনে না নিয়ে তার কারণ জিজ্ঞাসা করুন। সমস্যা এবং সমাধানের গভীরে যাওয়ার চেষ্টা করুন।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: কোনো বাগ রিপোর্ট পেলে বা নতুন রিকয়রমেন্ট পেলে শুধু তার সমাধান না করে, তার পেছনের কারণ বোঝার চেষ্টা করুন। এটি আপনাকে আরও ভালো এবং টেকসই সমাধান খুঁজে বের করতে সাহায্য করবে।
* বাস্তব উদাহরণ:
    * উপরিতলীয় চিন্তা: "এই বাগটি ফিক্স করতে হবে।"
    * গভীর চিন্তা: "এই বাগটি কেন ঘটলো? আমাদের কোডে কি কোনো দুর্বলতা আছে যার কারণে এই ধরনের বাগ ভবিষ্যতে আবার আসতে পারে? আমরা কিভাবে আমাদের টেস্টিং প্রক্রিয়া উন্নত করতে পারি যাতে এই ধরনের বাগ আগে ধরা পড়ে?"

৯. নিজের প্রতি বিশ্বাস রাখুন (Believe Big):

* নীতি: নিজের দক্ষতা এবং যোগ্যতার উপর বিশ্বাস রাখুন। আত্মবিশ্বাস সাফল্যের ভিত্তি।
* সফটওয়্যার প্রকৌশলে প্রয়োগ: নতুন প্রযুক্তি শেখা বা জটিল সমস্যা সমাধান করার সময় নিজের উপর বিশ্বাস রাখা অপরিহার্য। মনে রাখবেন, আপনি যদি চেষ্টা করেন এবং লেগে থাকেন, তাহলে অবশ্যই সফল হবেন।
* বাস্তব উদাহরণ:
    * অবিশ্বাস: "আমি মনে করি না আমি এই কাজটি করতে পারব।"
    * বিশ্বাস: "এই কাজটি কঠিন হতে পারে, কিন্তু আমার দক্ষতা এবং পরিশ্রমের উপর আমার বিশ্বাস আছে। আমি অবশ্যই এটি সম্পন্ন করতে পারব।"


ডেভিড জে. শোয়ার্টজের "দ্য ম্যাজিক অফ থিংকিং বিগ" বইটি আপনাকে বড় স্বপ্ন দেখতে, ভয়কে জয় করতে এবং ইতিবাচক মনোভাবের সাথে আপনার লক্ষ্য অর্জনের পথে এগিয়ে যেতে অনুপ্রাণিত করবে। 
এই নীতিগুলো অনুসরণ করে একজন সফটওয়্যার প্রকৌশলী কেবল তার কারিগরি দক্ষতা বৃদ্ধিই করবে না, বরং একজন আত্মবিশ্বাসী, উদ্ভাবনী এবং সফল পেশাদার হিসেবেও নিজেকে প্রতিষ্ঠিত করতে পারবে। 
নিয়মিত এই নীতিগুলো নিয়ে ভাবুন এবং আপনার কর্মজীবনে প্রয়োগ করার চেষ্টা করুন। আপনার "বড় করে ভাবা"র জাদু আপনাকে অবশ্যই সেরা সফটওয়্যার প্রকৌশলীদের কাতারে নিয়ে যাবে।









-
